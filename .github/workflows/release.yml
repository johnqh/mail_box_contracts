name: Release TypeScript Client Library

on:
  push:
    tags:
      - 'v*.*.*'        # Triggers on version tags like v1.0.0, v1.1.0, etc.
      - 'v*.*.*-*'      # Triggers on pre-release tags like v1.0.0-beta.1
    branches:
      - main
      - master
    paths:
      - 'package.json'  # Trigger when version in package.json changes
  workflow_dispatch:    # Allow manual triggering
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Compile contracts
        run: npm run compile
      
      - name: Run tests
        run: npm test
      
      - name: Build TypeScript
        run: npm run build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
      
      - name: Check for high/critical vulnerabilities
        run: npm audit --audit-level high

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    # Only run if this is a tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Compile contracts
        run: npm run compile
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Update package.json version
        run: |
          npm version ${{ steps.get_version.outputs.version_number }} --no-git-tag-version
      
      - name: Verify build artifacts
        run: |
          echo "Checking dist directory..."
          ls -la dist/
          echo "Checking typechain-types directory..."
          ls -la typechain-types/
          echo "Verifying package.json main and types fields..."
          node -e "const pkg = require('./package.json'); console.log('Main:', pkg.main); console.log('Types:', pkg.types);"
      
      - name: Create .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          echo "registry=https://registry.npmjs.org" >> .npmrc
          echo "access=public" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to NPM
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🧪 DRY RUN: Would publish to NPM"
            npm publish --dry-run --access public
          else
            echo "📦 Publishing to NPM"
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Verify NPM publication
        run: |
          PACKAGE_NAME=$(node -e "console.log(require('./package.json').name)")
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Published $PACKAGE_NAME@$VERSION"
          sleep 30  # Wait for npm registry to sync
          npm view $PACKAGE_NAME@$VERSION

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    # Only run if this is a tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "## 🚀 Release ${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### 📋 Changes since $LAST_TAG:" >> CHANGELOG.md
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
          else
            echo "### 📋 Initial Release Changes:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" --no-merges -10 >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### 🔧 Installation:" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "npm install mail_box_contracts@${{ steps.get_version.outputs.version }}" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "### 📦 Package Info:" >> CHANGELOG.md
          echo "- **TypeScript Types**: Included" >> CHANGELOG.md
          echo "- **Contract ABIs**: Included in typechain-types" >> CHANGELOG.md
          echo "- **Solidity Version**: $(grep 'pragma solidity' contracts/*.sol | head -1 | cut -d' ' -f3 | tr -d ';')" >> CHANGELOG.md
          echo "- **Security Audited**: ✅" >> CHANGELOG.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    # Only run if this is a tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          # Multi-stage build for MailBox Contracts
          FROM node:18-alpine AS builder
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          
          # Install dependencies
          RUN npm ci
          
          # Copy source code
          COPY . .
          
          # Compile contracts and build TypeScript
          RUN npm run compile && npm run build
          
          # Production image
          FROM node:18-alpine AS runtime
          
          WORKDIR /app
          
          # Copy only necessary files
          COPY --from=builder /app/dist ./dist
          COPY --from=builder /app/typechain-types ./typechain-types
          COPY --from=builder /app/artifacts ./artifacts
          COPY --from=builder /app/package*.json ./
          
          # Install only production dependencies
          RUN npm ci --only=production && npm cache clean --force
          
          # Create non-root user
          RUN addgroup -g 1001 -S nodejs && \
              adduser -S mailbox -u 1001
          
          USER mailbox
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD node -e "console.log('MailBox Contracts v${{ steps.get_version.outputs.version_number }} healthy')" || exit 1
          
          EXPOSE 3000
          
          CMD ["node", "dist/src/index.js"]
          EOF
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:${{ steps.get_version.outputs.version_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.get_version.outputs.version_number }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [publish-npm, create-github-release, build-docker]
    # Only run if this is a tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Verify NPM package
        run: |
          PACKAGE_NAME="mail_box_contracts"
          sleep 60  # Wait for npm registry to fully sync
          
          echo "🔍 Verifying NPM package publication..."
          npm view $PACKAGE_NAME@${{ steps.get_version.outputs.version }} --json
          
          echo "📦 Package is available at:"
          echo "https://www.npmjs.com/package/$PACKAGE_NAME/v/${{ steps.get_version.outputs.version }}"
      
      - name: Verify Docker image
        run: |
          echo "🐳 Verifying Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:${{ steps.get_version.outputs.version }}
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:${{ steps.get_version.outputs.version }} node -e "console.log('Docker image verified')"
          
          echo "🐳 Docker image is available at:"
          echo "https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts"
      
      - name: Create release summary
        run: |
          echo "## 🎉 Release ${{ steps.get_version.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM**: \`npm install mail_box_contracts@${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: \`docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts:${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Package](https://www.npmjs.com/package/mail_box_contracts)" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/mail_box_contracts)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY