name: Build and Test

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*', 'release/*' ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  FORCE_COLOR: '1'

jobs:
  build-info:
    name: Build Information
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.changes.outputs.should_run_tests }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
      is_main_branch: ${{ steps.branch.outputs.is_main_branch }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get branch information
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          IS_MAIN_BRANCH="false"
          if [ "$BRANCH_NAME" = "main" ]; then
            IS_MAIN_BRANCH="true"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "is_main_branch=$IS_MAIN_BRANCH" >> $GITHUB_OUTPUT
          echo "üåü Branch: $BRANCH_NAME (main: $IS_MAIN_BRANCH)"
      
      - name: Check for relevant changes
        id: changes
        run: |
          # Check if we should run full tests based on changed files
          SHOULD_RUN_TESTS="true"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            # Check changed files in the push
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
            if [ -n "$CHANGED_FILES" ]; then
              echo "üìÅ Changed files:"
              echo "$CHANGED_FILES"
              
              # If only docs/markdown files changed, skip tests
              if echo "$CHANGED_FILES" | grep -qvE '\.(md|txt)$|^docs/|^\.github/workflows/'; then
                SHOULD_RUN_TESTS="true"
              else
                SHOULD_RUN_TESTS="false"
              fi
            fi
          fi
          
          echo "should_run_tests=$SHOULD_RUN_TESTS" >> $GITHUB_OUTPUT
          echo "üß™ Should run tests: $SHOULD_RUN_TESTS"

  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: build-info
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Check package.json validity
        run: |
          echo "üìã Validating package.json..."
          node -e "
            const pkg = require('./package.json');
            console.log('‚úÖ Package name:', pkg.name);
            console.log('‚úÖ Version:', pkg.version);
            console.log('‚úÖ Main file:', pkg.main);
            console.log('‚úÖ Types file:', pkg.types);
            
            // Check for required fields
            if (!pkg.name || !pkg.version || !pkg.main || !pkg.types) {
              console.error('‚ùå Missing required package.json fields');
              process.exit(1);
            }
            
            console.log('‚úÖ Package.json is valid');
          "
      
      - name: Check dependency vulnerabilities (quick)
        run: |
          echo "üîç Quick vulnerability check..."
          npm audit --audit-level high --package-lock-only || true
          echo "‚ö†Ô∏è Vulnerabilities found - will be checked in full CI"
      
      - name: Validate TypeScript configuration
        run: |
          if [ -f tsconfig.json ]; then
            echo "‚úÖ TypeScript config found"
            node -e "
              try {
                const ts = require('typescript');
                const config = ts.readConfigFile('tsconfig.json', ts.sys.readFile);
                if (config.error) {
                  console.error('‚ùå TypeScript config error:', config.error);
                  process.exit(1);
                }
                console.log('‚úÖ TypeScript config is valid');
              } catch(e) {
                console.log('‚ö†Ô∏è TypeScript not available for validation');
              }
            "
          else
            echo "‚ö†Ô∏è No TypeScript config found"
          fi

  build:
    name: Build Contracts and TypeScript
    runs-on: ubuntu-latest
    needs: [build-info, quick-checks]
    if: needs.build-info.outputs.should_run_tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
      
      - name: Build TypeScript for CI
        run: |
          echo "üèóÔ∏è Building TypeScript for CI..."
          npm run build:ci
          
          echo "üìä Build results:"
          ls -la dist/ || echo "No dist folder found"
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist/
            typechain-types/
            artifacts/
          key: build-${{ github.sha }}
          restore-keys: |
            build-${{ github.ref_name }}-

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [build-info, build]
    if: needs.build-info.outputs.should_run_tests == 'true'
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            dist/
            typechain-types/
            artifacts/
          key: build-${{ github.sha }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Restore/rebuild if cache miss
        run: |
          if [ ! -d "dist" ]; then
            echo "üîÑ Cache miss - rebuilding..."
            npm run build:ci
          else
            echo "‚úÖ Using cached build artifacts"
          fi
      
      - name: Run TypeScript tests
        run: |
          echo "üß™ Running TypeScript tests with Node.js ${{ matrix.node-version }}..."
          npm run test:ci
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            test-results.xml
            coverage/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [build-info, quick-checks]
    if: needs.build-info.outputs.is_main_branch == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run comprehensive security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level moderate || true
          echo "‚ö†Ô∏è Known development-only vulnerabilities documented in SECURITY.md"
          
          echo "üìä Dependency analysis:"
          npm ls --depth=0 || true
          
          # Check for known vulnerabilities in specific packages
          echo "üîç Checking critical packages..."
          npx audit-ci --moderate --allowlist-path .audit-allowlist || true

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: [build-info, build]
    if: needs.build-info.outputs.should_run_tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            dist/
            typechain-types/
            artifacts/
          key: build-${{ github.sha }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Ensure build artifacts exist
        run: |
          if [ ! -d "dist" ]; then
            npm run build:ci
          fi
      
      - name: Test TypeScript package exports
        run: |
          echo "üì¶ Testing TypeScript package exports..."
          node -e "
            try {
              const exports = require('./dist/unified/src/unified/mailbox-client.js');
              console.log('‚úÖ Unified client exports:', Object.keys(exports));
              
              // Test importing unified client
              const { UnifiedMailBoxClient } = exports;
              
              if (UnifiedMailBoxClient) {
                console.log('‚úÖ UnifiedMailBoxClient available');
              } else {
                console.error('‚ùå UnifiedMailBoxClient not found');
                process.exit(1);
              }
              
              console.log('‚úÖ TypeScript exports are available');
            } catch (e) {
              console.error('‚ùå TypeScript package export failed:', e.message);
              process.exit(1);
            }
          "
      
      - name: Test npm pack
        run: |
          echo "üì¶ Testing npm pack..."
          npm pack --dry-run
          echo "‚úÖ Package would be created successfully"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-info, quick-checks, build, test, security-audit, package-validation]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## üöÄ Build Summary for ${{ needs.build-info.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status
          echo "### üìä Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Quick Checks**: ${{ needs.quick-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ needs.package-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Branch info
          echo "### üå≥ Branch Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ needs.build-info.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Main Branch**: ${{ needs.build-info.outputs.is_main_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Run Tests**: ${{ needs.build-info.outputs.should_run_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "### ‚úÖ Build Status: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! Ready for production." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Build Status: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi