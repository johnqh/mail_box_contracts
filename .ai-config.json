{
  "name": "MailBox Contracts",
  "description": "Production-ready multi-chain decentralized messaging system with USDC fees, revenue sharing, and unified client interface",
  "version": "1.5.2",
  "type": "multi-chain-dapp",
  "chains": ["ethereum", "polygon", "arbitrum", "optimism", "solana"],
  "languages": ["solidity", "rust", "typescript"],
  "frameworks": ["hardhat", "anchor", "ethers", "viem", "mocha"],
  "package_name": "@johnqh/mail_box_contracts",
  
  "ai_development": {
    "primary_tasks": [
      "smart_contract_development",
      "multi_chain_integration",
      "testing_and_validation",
      "client_library_development"
    ],
    
    "key_patterns": {
      "contract_modification": "Always compile after changes: npm run compile",
      "testing": "Run full test suite: npm test (88+ tests)",
      "deployment": "Local development: npm run deploy:local",
      "debugging": "Use comprehensive logging and error handling"
    },
    
    "common_workflows": {
      "new_feature": [
        "1. Modify contracts (EVM + Solana)",
        "2. Run npm run compile",
        "3. Update TypeScript clients (MailerClient only)",
        "4. Add comprehensive tests",
        "5. Run npm test (124+ tests)",
        "6. Update documentation"
      ],
      "bug_fix": [
        "1. Identify issue in tests",
        "2. Fix contract or client code",
        "3. Run npm run compile",
        "4. Verify fix with tests",
        "5. Add regression test"
      ],
      "ai_development": [
        "1. Run npm run ai:status for project health check",
        "2. Use npm run ai:dev for development helper menu",
        "3. Run npm run ai:check for validation",
        "4. Use npm run ai:examples to test examples",
        "5. Run npm run ai:test for comprehensive testing"
      ]
    },
    
    "architecture": {
      "evm_contracts": {
        "location": "contracts/",
        "main_files": ["MailService.sol", "Mailer.sol", "MockUSDC.sol"],
        "compilation": "npx hardhat compile",
        "testing": "npx hardhat test"
      },
      "solana_programs": {
        "location": "programs/",
        "main_programs": ["mail_service", "mailer", "mail_box_factory"],
        "compilation": "cargo build-sbf --manifest-path programs/{program}/Cargo.toml",
        "anchor_compilation": "anchor build (requires proper Anchor CLI setup)",
        "testing": "npm run test:solana",
        "build_status": "Successfully built with Rust 1.75.0 and Anchor 0.28.0",
        "runtime_requirements": {
          "rust": "1.75.0",
          "anchor": "0.28.0",
          "solana_cli": "latest"
        }
      },
      "typescript_clients": {
        "location": "src/",
        "structure": ["evm/", "solana/", "unified/", "utils/"],
        "types": "Auto-generated in typechain-types/"
      }
    },
    
    "testing_strategy": {
      "total_tests": "116+",
      "test_breakdown": {
        "evm_tests": 75,
        "solana_tests": 8,
        "unified_tests": 41
      },
      "categories": ["unit", "integration", "multi_chain", "error_handling"],
      "test_files": ["test/evm/Mailer.test.ts", "test/solana/", "test/unified/"],
      "mock_contracts": ["MockUSDC.sol"],
      "patterns": [
        "Always fund test accounts with MockUSDC before testing",
        "Test both success and error conditions comprehensively",
        "Verify event emissions with exact parameters",
        "Test fee calculations with precise amounts",
        "Test edge cases like zero amounts and boundary conditions",
        "Verify gas usage and transaction receipts"
      ]
    }
  },
  
  "code_style": {
    "solidity": {
      "style": "Modern Solidity with custom errors",
      "patterns": ["reentrancy protection", "precise fee calculations", "comprehensive events"],
      "naming": "camelCase for functions, PascalCase for contracts"
    },
    "rust": {
      "style": "Anchor framework patterns",
      "patterns": ["PDA seeds", "account validation", "CPI calls"],
      "naming": "snake_case for functions, PascalCase for structs"
    },
    "typescript": {
      "style": "Strict TypeScript with comprehensive types",
      "patterns": ["async/await", "proper error handling", "type safety"],
      "naming": "camelCase for variables, PascalCase for classes"
    }
  },
  
  "quick_commands": {
    "compile": "npm run compile",
    "test": "npm test",
    "deploy_local": "npm run deploy:local",
    "clean": "npm run clean",
    "build": "npm run build",
    "lint": "npm run lint",
    "typecheck": "npm run typecheck"
  },
  
  "ai_assistance_notes": {
    "always_compile_after_contract_changes": true,
    "run_tests_before_committing": true,
    "update_documentation_with_changes": true,
    "maintain_cross_chain_compatibility": true,
    "follow_existing_patterns": true
  },

  "ai_optimization": {
    "documentation_files": [
      "CLAUDE.md",
      "docs/AI_DEVELOPMENT_PATTERNS.md", 
      "docs/AI_QUICK_START.md",
      "docs/ai-development-patterns.md",
      "AI_DEVELOPMENT_GUIDE.md",
      "README.md"
    ],
    "example_files": [
      "examples/basic-usage.ts",
      "examples/evm-usage.ts", 
      "examples/solana-usage.ts",
      "examples/unified-usage.ts"
    ],
    "key_interfaces": [
      "src/unified/types.ts",
      "src/types/common.ts",
      "src/unified/onchain-mailer-client.ts",
      "src/unified/wallet-detector.ts"
    ],
    "test_patterns": [
      "test/evm/Mailer.test.ts",
      "test/unified/*.test.ts"
    ],
    "deployment_scripts": [
      "scripts/deploy-local.ts",
      "scripts/evm/deploy.ts"
    ],
    "configuration_files": [
      "hardhat.config.ts",
      "package.json",
      "tsconfig.json",
      ".eslintrc.js"
    ]
  },

  "ai_workflow_hints": {
    "before_coding": [
      "Read CLAUDE.md and AI_DEVELOPMENT_PATTERNS.md for context",
      "Check current git status and test status",
      "Understand the specific task requirements"
    ],
    "during_coding": [
      "Follow existing code patterns and naming conventions", 
      "Add comprehensive JSDoc comments",
      "Consider multi-chain compatibility",
      "Handle errors gracefully with specific messages"
    ],
    "after_coding": [
      "Run npm run compile after contract changes",
      "Run npm test to ensure no regressions", 
      "Check npm run build for TypeScript errors",
      "Update documentation if needed",
      "Verify all edge cases are tested"
    ],
    "common_pitfalls": [
      "Forgetting to compile after contract changes",
      "Not funding test accounts with MockUSDC", 
      "Missing error handling in async operations",
      "Not testing both EVM and Solana paths",
      "Forgetting to update TypeScript types after contract changes",
      "Using removed MailBoxClient or MailServiceClient classes",
      "Missing 'to' parameter in send() and sendPriority() calls"
    ]
  },

  "success_criteria": {
    "code_quality": [
      "116+ tests passing",
      "Zero TypeScript errors",
      "Zero ESLint warnings",
      "Clean git status",
      "Proper error handling"
    ],
    "documentation": [
      "JSDoc comments for all public methods",
      "Updated README if API changed",
      "Example code for new features",
      "Clear error messages"
    ],
    "testing": [
      "New tests for new functionality",
      "Both success and error cases covered",
      "Multi-chain compatibility tested",
      "Edge cases handled"
    ]
  }
}