/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MailBoxFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchDeploy"
      | "deployContract"
      | "generateSalt"
      | "getCodeHash"
      | "isContractDeployed"
      | "predictAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "batchDeploy",
    values: [BytesLike[], BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSalt",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractDeployed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictAddress",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictAddress",
    data: BytesLike
  ): Result;
}

export namespace ContractDeployedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    salt: BytesLike,
    contractType: string
  ];
  export type OutputTuple = [
    contractAddress: string,
    salt: string,
    contractType: string
  ];
  export interface OutputObject {
    contractAddress: string;
    salt: string;
    contractType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailBoxFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MailBoxFactory;
  waitForDeployment(): Promise<this>;

  interface: MailBoxFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchDeploy: TypedContractMethod<
    [bytecodes: BytesLike[], salts: BytesLike[], contractTypes: string[]],
    [string[]],
    "nonpayable"
  >;

  deployContract: TypedContractMethod<
    [bytecode: BytesLike, salt: BytesLike, contractType: string],
    [string],
    "nonpayable"
  >;

  generateSalt: TypedContractMethod<
    [projectName: string, version: string, contractType: string],
    [string],
    "view"
  >;

  getCodeHash: TypedContractMethod<[bytecode: BytesLike], [string], "view">;

  isContractDeployed: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  predictAddress: TypedContractMethod<
    [bytecode: BytesLike, salt: BytesLike, deployer: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchDeploy"
  ): TypedContractMethod<
    [bytecodes: BytesLike[], salts: BytesLike[], contractTypes: string[]],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployContract"
  ): TypedContractMethod<
    [bytecode: BytesLike, salt: BytesLike, contractType: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generateSalt"
  ): TypedContractMethod<
    [projectName: string, version: string, contractType: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCodeHash"
  ): TypedContractMethod<[bytecode: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isContractDeployed"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "predictAddress"
  ): TypedContractMethod<
    [bytecode: BytesLike, salt: BytesLike, deployer: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "ContractDeployed"
  ): TypedContractEvent<
    ContractDeployedEvent.InputTuple,
    ContractDeployedEvent.OutputTuple,
    ContractDeployedEvent.OutputObject
  >;

  filters: {
    "ContractDeployed(address,bytes32,string)": TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
    ContractDeployed: TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
  };
}
