/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MailBoxFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployBoth"
      | "deployMailService"
      | "deployMailer"
      | "generateSalt"
      | "isContractDeployed"
      | "predictMailServiceAddress"
      | "predictMailerAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MailServiceDeployed" | "MailerDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployBoth",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMailService",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMailer",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSalt",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractDeployed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictMailServiceAddress",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictMailerAddress",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deployBoth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployMailService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployMailer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictMailServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictMailerAddress",
    data: BytesLike
  ): Result;
}

export namespace MailServiceDeployedEvent {
  export type InputTuple = [
    mailService: AddressLike,
    usdcToken: AddressLike,
    owner: AddressLike,
    salt: BytesLike
  ];
  export type OutputTuple = [
    mailService: string,
    usdcToken: string,
    owner: string,
    salt: string
  ];
  export interface OutputObject {
    mailService: string;
    usdcToken: string;
    owner: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MailerDeployedEvent {
  export type InputTuple = [
    mailer: AddressLike,
    usdcToken: AddressLike,
    owner: AddressLike,
    salt: BytesLike
  ];
  export type OutputTuple = [
    mailer: string,
    usdcToken: string,
    owner: string,
    salt: string
  ];
  export interface OutputObject {
    mailer: string;
    usdcToken: string;
    owner: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailBoxFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MailBoxFactory;
  waitForDeployment(): Promise<this>;

  interface: MailBoxFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployBoth: TypedContractMethod<
    [
      usdcToken: AddressLike,
      owner: AddressLike,
      mailerSalt: BytesLike,
      mailServiceSalt: BytesLike
    ],
    [[string, string] & { mailer: string; mailService: string }],
    "nonpayable"
  >;

  deployMailService: TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "nonpayable"
  >;

  deployMailer: TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "nonpayable"
  >;

  generateSalt: TypedContractMethod<
    [projectName: string, version: string, contractType: string],
    [string],
    "view"
  >;

  isContractDeployed: TypedContractMethod<
    [addr: AddressLike],
    [boolean],
    "view"
  >;

  predictMailServiceAddress: TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;

  predictMailerAddress: TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployBoth"
  ): TypedContractMethod<
    [
      usdcToken: AddressLike,
      owner: AddressLike,
      mailerSalt: BytesLike,
      mailServiceSalt: BytesLike
    ],
    [[string, string] & { mailer: string; mailService: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployMailService"
  ): TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployMailer"
  ): TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generateSalt"
  ): TypedContractMethod<
    [projectName: string, version: string, contractType: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContractDeployed"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "predictMailServiceAddress"
  ): TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictMailerAddress"
  ): TypedContractMethod<
    [usdcToken: AddressLike, owner: AddressLike, salt: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "MailServiceDeployed"
  ): TypedContractEvent<
    MailServiceDeployedEvent.InputTuple,
    MailServiceDeployedEvent.OutputTuple,
    MailServiceDeployedEvent.OutputObject
  >;
  getEvent(
    key: "MailerDeployed"
  ): TypedContractEvent<
    MailerDeployedEvent.InputTuple,
    MailerDeployedEvent.OutputTuple,
    MailerDeployedEvent.OutputObject
  >;

  filters: {
    "MailServiceDeployed(address,address,address,bytes32)": TypedContractEvent<
      MailServiceDeployedEvent.InputTuple,
      MailServiceDeployedEvent.OutputTuple,
      MailServiceDeployedEvent.OutputObject
    >;
    MailServiceDeployed: TypedContractEvent<
      MailServiceDeployedEvent.InputTuple,
      MailServiceDeployedEvent.OutputTuple,
      MailServiceDeployedEvent.OutputObject
    >;

    "MailerDeployed(address,address,address,bytes32)": TypedContractEvent<
      MailerDeployedEvent.InputTuple,
      MailerDeployedEvent.OutputTuple,
      MailerDeployedEvent.OutputObject
    >;
    MailerDeployed: TypedContractEvent<
      MailerDeployedEvent.InputTuple,
      MailerDeployedEvent.OutputTuple,
      MailerDeployedEvent.OutputObject
    >;
  };
}
