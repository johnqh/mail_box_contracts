/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SafeDelegateHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOwner"
      | "domainSeparator"
      | "fundAndApprove"
      | "getMyDomains"
      | "getOwners"
      | "getThreshold"
      | "isOwner"
      | "mailService"
      | "nonce"
      | "removeOwner"
      | "setThreshold"
      | "testDelegation"
      | "testDomainRegistration"
      | "testDomainRelease"
      | "usdcToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundAndApprove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyDomains",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mailService",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDelegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDomainRegistration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testDomainRelease",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundAndApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mailService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDomainRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDomainRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export interface SafeDelegateHelper extends BaseContract {
  connect(runner?: ContractRunner | null): SafeDelegateHelper;
  waitForDeployment(): Promise<this>;

  interface: SafeDelegateHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  fundAndApprove: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMyDomains: TypedContractMethod<
    [],
    [[string[], bigint[]] & { domains: string[]; expirations: bigint[] }],
    "view"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  isOwner: TypedContractMethod<[owner: AddressLike], [boolean], "view">;

  mailService: TypedContractMethod<[], [string], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  removeOwner: TypedContractMethod<
    [ownerToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  setThreshold: TypedContractMethod<
    [_threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDelegation: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  testDomainRegistration: TypedContractMethod<
    [domain: string],
    [void],
    "nonpayable"
  >;

  testDomainRelease: TypedContractMethod<
    [domain: string],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundAndApprove"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMyDomains"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { domains: string[]; expirations: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mailService"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<[ownerToRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<[_threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDelegation"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDomainRegistration"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDomainRelease"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
