/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrivilegedMailInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFee"
      | "owner"
      | "send"
      | "sendFee"
      | "sendPrepared"
      | "setFee"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FeeUpdated" | "MailSent" | "PreparedMailSent"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "sendFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendPrepared",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPrepared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MailSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    subject: string,
    body: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    subject: string,
    body: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    subject: string;
    body: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreparedMailSentEvent {
  export type InputTuple = [from: AddressLike, mailId: string];
  export type OutputTuple = [from: string, mailId: string];
  export interface OutputObject {
    from: string;
    mailId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivilegedMail extends BaseContract {
  connect(runner?: ContractRunner | null): PrivilegedMail;
  waitForDeployment(): Promise<this>;

  interface: PrivilegedMailInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  send: TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;

  sendFee: TypedContractMethod<[], [bigint], "view">;

  sendPrepared: TypedContractMethod<[mailId: string], [void], "nonpayable">;

  setFee: TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendPrepared"
  ): TypedContractMethod<[mailId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MailSent"
  ): TypedContractEvent<
    MailSentEvent.InputTuple,
    MailSentEvent.OutputTuple,
    MailSentEvent.OutputObject
  >;
  getEvent(
    key: "PreparedMailSent"
  ): TypedContractEvent<
    PreparedMailSentEvent.InputTuple,
    PreparedMailSentEvent.OutputTuple,
    PreparedMailSentEvent.OutputObject
  >;

  filters: {
    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "MailSent(address,address,string,string)": TypedContractEvent<
      MailSentEvent.InputTuple,
      MailSentEvent.OutputTuple,
      MailSentEvent.OutputObject
    >;
    MailSent: TypedContractEvent<
      MailSentEvent.InputTuple,
      MailSentEvent.OutputTuple,
      MailSentEvent.OutputObject
    >;

    "PreparedMailSent(address,string)": TypedContractEvent<
      PreparedMailSentEvent.InputTuple,
      PreparedMailSentEvent.OutputTuple,
      PreparedMailSentEvent.OutputObject
    >;
    PreparedMailSent: TypedContractEvent<
      PreparedMailSentEvent.InputTuple,
      PreparedMailSentEvent.OutputTuple,
      PreparedMailSentEvent.OutputObject
    >;
  };
}
