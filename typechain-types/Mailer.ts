/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MailerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLAIM_PERIOD"
      | "OWNER_SHARE"
      | "RECIPIENT_SHARE"
      | "claimExpiredShares"
      | "claimOwnerShare"
      | "claimRecipientShare"
      | "getFee"
      | "getOwnerClaimable"
      | "getRecipientClaimable"
      | "owner"
      | "ownerClaimable"
      | "recipientClaims"
      | "send"
      | "sendFee"
      | "sendPrepared"
      | "sendPriority"
      | "sendPriorityPrepared"
      | "setFee"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExpiredSharesClaimed"
      | "FeeUpdated"
      | "MailSent"
      | "OwnerClaimed"
      | "PreparedMailSent"
      | "RecipientClaimed"
      | "SharesRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_SHARE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECIPIENT_SHARE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimExpiredShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRecipientShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwnerClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientClaimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipientClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "sendFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendPrepared",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPriority",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPriorityPrepared",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNER_SHARE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RECIPIENT_SHARE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExpiredShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRecipientShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPrepared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPriorityPrepared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace ExpiredSharesClaimedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MailSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    subject: string,
    body: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    subject: string,
    body: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    subject: string;
    body: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerClaimedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreparedMailSentEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, mailId: string];
  export type OutputTuple = [from: string, to: string, mailId: string];
  export interface OutputObject {
    from: string;
    to: string;
    mailId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientClaimedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesRecordedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    recipientAmount: BigNumberish,
    ownerAmount: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    recipientAmount: bigint,
    ownerAmount: bigint
  ];
  export interface OutputObject {
    recipient: string;
    recipientAmount: bigint;
    ownerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mailer extends BaseContract {
  connect(runner?: ContractRunner | null): Mailer;
  waitForDeployment(): Promise<this>;

  interface: MailerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLAIM_PERIOD: TypedContractMethod<[], [bigint], "view">;

  OWNER_SHARE: TypedContractMethod<[], [bigint], "view">;

  RECIPIENT_SHARE: TypedContractMethod<[], [bigint], "view">;

  claimExpiredShares: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  claimOwnerShare: TypedContractMethod<[], [void], "nonpayable">;

  claimRecipientShare: TypedContractMethod<[], [void], "nonpayable">;

  getFee: TypedContractMethod<[], [bigint], "view">;

  getOwnerClaimable: TypedContractMethod<[], [bigint], "view">;

  getRecipientClaimable: TypedContractMethod<
    [recipient: AddressLike],
    [
      [bigint, bigint, boolean] & {
        amount: bigint;
        expiresAt: bigint;
        isExpired: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerClaimable: TypedContractMethod<[], [bigint], "view">;

  recipientClaims: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; timestamp: bigint }],
    "view"
  >;

  send: TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;

  sendFee: TypedContractMethod<[], [bigint], "view">;

  sendPrepared: TypedContractMethod<
    [to: AddressLike, mailId: string],
    [void],
    "nonpayable"
  >;

  sendPriority: TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;

  sendPriorityPrepared: TypedContractMethod<
    [to: AddressLike, mailId: string],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLAIM_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OWNER_SHARE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RECIPIENT_SHARE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimExpiredShares"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimOwnerShare"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRecipientShare"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwnerClaimable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecipientClaimable"
  ): TypedContractMethod<
    [recipient: AddressLike],
    [
      [bigint, bigint, boolean] & {
        amount: bigint;
        expiresAt: bigint;
        isExpired: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerClaimable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipientClaims"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendPrepared"
  ): TypedContractMethod<
    [to: AddressLike, mailId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendPriority"
  ): TypedContractMethod<
    [to: AddressLike, subject: string, body: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendPriorityPrepared"
  ): TypedContractMethod<
    [to: AddressLike, mailId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ExpiredSharesClaimed"
  ): TypedContractEvent<
    ExpiredSharesClaimedEvent.InputTuple,
    ExpiredSharesClaimedEvent.OutputTuple,
    ExpiredSharesClaimedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MailSent"
  ): TypedContractEvent<
    MailSentEvent.InputTuple,
    MailSentEvent.OutputTuple,
    MailSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnerClaimed"
  ): TypedContractEvent<
    OwnerClaimedEvent.InputTuple,
    OwnerClaimedEvent.OutputTuple,
    OwnerClaimedEvent.OutputObject
  >;
  getEvent(
    key: "PreparedMailSent"
  ): TypedContractEvent<
    PreparedMailSentEvent.InputTuple,
    PreparedMailSentEvent.OutputTuple,
    PreparedMailSentEvent.OutputObject
  >;
  getEvent(
    key: "RecipientClaimed"
  ): TypedContractEvent<
    RecipientClaimedEvent.InputTuple,
    RecipientClaimedEvent.OutputTuple,
    RecipientClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SharesRecorded"
  ): TypedContractEvent<
    SharesRecordedEvent.InputTuple,
    SharesRecordedEvent.OutputTuple,
    SharesRecordedEvent.OutputObject
  >;

  filters: {
    "ExpiredSharesClaimed(address,uint256)": TypedContractEvent<
      ExpiredSharesClaimedEvent.InputTuple,
      ExpiredSharesClaimedEvent.OutputTuple,
      ExpiredSharesClaimedEvent.OutputObject
    >;
    ExpiredSharesClaimed: TypedContractEvent<
      ExpiredSharesClaimedEvent.InputTuple,
      ExpiredSharesClaimedEvent.OutputTuple,
      ExpiredSharesClaimedEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "MailSent(address,address,string,string)": TypedContractEvent<
      MailSentEvent.InputTuple,
      MailSentEvent.OutputTuple,
      MailSentEvent.OutputObject
    >;
    MailSent: TypedContractEvent<
      MailSentEvent.InputTuple,
      MailSentEvent.OutputTuple,
      MailSentEvent.OutputObject
    >;

    "OwnerClaimed(uint256)": TypedContractEvent<
      OwnerClaimedEvent.InputTuple,
      OwnerClaimedEvent.OutputTuple,
      OwnerClaimedEvent.OutputObject
    >;
    OwnerClaimed: TypedContractEvent<
      OwnerClaimedEvent.InputTuple,
      OwnerClaimedEvent.OutputTuple,
      OwnerClaimedEvent.OutputObject
    >;

    "PreparedMailSent(address,address,string)": TypedContractEvent<
      PreparedMailSentEvent.InputTuple,
      PreparedMailSentEvent.OutputTuple,
      PreparedMailSentEvent.OutputObject
    >;
    PreparedMailSent: TypedContractEvent<
      PreparedMailSentEvent.InputTuple,
      PreparedMailSentEvent.OutputTuple,
      PreparedMailSentEvent.OutputObject
    >;

    "RecipientClaimed(address,uint256)": TypedContractEvent<
      RecipientClaimedEvent.InputTuple,
      RecipientClaimedEvent.OutputTuple,
      RecipientClaimedEvent.OutputObject
    >;
    RecipientClaimed: TypedContractEvent<
      RecipientClaimedEvent.InputTuple,
      RecipientClaimedEvent.OutputTuple,
      RecipientClaimedEvent.OutputObject
    >;

    "SharesRecorded(address,uint256,uint256)": TypedContractEvent<
      SharesRecordedEvent.InputTuple,
      SharesRecordedEvent.OutputTuple,
      SharesRecordedEvent.OutputObject
    >;
    SharesRecorded: TypedContractEvent<
      SharesRecordedEvent.InputTuple,
      SharesRecordedEvent.OutputTuple,
      SharesRecordedEvent.OutputObject
    >;
  };
}
