/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MailService,
  MailServiceInterface,
} from "../../MailService.sol/MailService";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DomainAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDomain",
    type: "error",
  },
  {
    inputs: [],
    name: "NotASafeWallet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address",
      },
    ],
    name: "DelegationCleared",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address",
      },
    ],
    name: "DelegationSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "registrar",
        type: "address",
      },
    ],
    name: "DomainRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
    ],
    name: "delegateTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
    ],
    name: "getDelegatedAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
    ],
    name: "getDomainRegister",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomains",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
    ],
    name: "registerDomain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051610f1161006060003960006101a50152610f116000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80638ce70c68146100675780638da5cb5b146100975780639101cc65146100b5578063a5cad08a146100d3578063ac637c7a146100ef578063b4dc33231461010b575b600080fd5b610081600480360381019061007c919061088d565b61013b565b60405161008e91906108c9565b60405180910390f35b61009f6101a3565b6040516100ac91906108c9565b60405180910390f35b6100bd6101c7565b6040516100ca9190610a36565b60405180910390f35b6100ed60048036038101906100e89190610abd565b6102dd565b005b6101096004803603810190610104919061088d565b610538565b005b61012560048036038101906101209190610abd565b61072f565b60405161013291906108c9565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156102d457838290600052602060002001805461024790610b39565b80601f016020809104026020016040519081016040528092919081815260200182805461027390610b39565b80156102c05780601f10610295576101008083540402835291602001916102c0565b820191906000526020600020905b8154815290600101906020018083116102a357829003601f168201915b505050505081526020019060010190610228565b50505050905090565b6102e63361077a565b61031c576040517f1616e4d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008282905003610359576040517f9f13c33600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660018383604051610383929190610ba9565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f7b857a6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360018383604051610412929190610ba9565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208282909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091826104d8929190610db2565b503373ffffffffffffffffffffffffffffffffffffffff168282604051610500929190610ba9565b60405180910390207f70f2ff07e8136617cdfb0433423063c9dd697c507560d7860cce09fa86874a1260405160405180910390a35050565b6105413361077a565b610577576040517f1616e4d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610654576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690553373ffffffffffffffffffffffffffffffffffffffff167f523886ce650fe884659b1bdfd3ba0f5d4b3207220aff78bfa9bdd347c6e22a3260405160405180910390a261072c565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f39e3ace752997a751bda5ecf126da84d0d23d5e61f3f56f26a6b22990d7beed860405160405180910390a35b50565b600060018383604051610743929190610ba9565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b036107a35760009050610820565b8173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561080b57506040513d601f19601f820116820180604052508101906108089190610eae565b60015b6108185760009050610820565b600081119150505b919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085a8261082f565b9050919050565b61086a8161084f565b811461087557600080fd5b50565b60008135905061088781610861565b92915050565b6000602082840312156108a3576108a2610825565b5b60006108b184828501610878565b91505092915050565b6108c38161084f565b82525050565b60006020820190506108de60008301846108ba565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561094a57808201518184015260208101905061092f565b60008484015250505050565b6000601f19601f8301169050919050565b600061097282610910565b61097c818561091b565b935061098c81856020860161092c565b61099581610956565b840191505092915050565b60006109ac8383610967565b905092915050565b6000602082019050919050565b60006109cc826108e4565b6109d681856108ef565b9350836020820285016109e885610900565b8060005b85811015610a245784840389528151610a0585826109a0565b9450610a10836109b4565b925060208a019950506001810190506109ec565b50829750879550505050505092915050565b60006020820190508181036000830152610a5081846109c1565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a7d57610a7c610a58565b5b8235905067ffffffffffffffff811115610a9a57610a99610a5d565b5b602083019150836001820283011115610ab657610ab5610a62565b5b9250929050565b60008060208385031215610ad457610ad3610825565b5b600083013567ffffffffffffffff811115610af257610af161082a565b5b610afe85828601610a67565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b5157607f821691505b602082108103610b6457610b63610b0a565b5b50919050565b600081905092915050565b82818337600083830152505050565b6000610b908385610b6a565b9350610b9d838584610b75565b82840190509392505050565b6000610bb6828486610b84565b91508190509392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c21565b610c688683610c21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610caf610caa610ca584610c80565b610c8a565b610c80565b9050919050565b6000819050919050565b610cc983610c94565b610cdd610cd582610cb6565b848454610c2e565b825550505050565b600090565b610cf2610ce5565b610cfd818484610cc0565b505050565b5b81811015610d2157610d16600082610cea565b600181019050610d03565b5050565b601f821115610d6657610d3781610bfc565b610d4084610c11565b81016020851015610d4f578190505b610d63610d5b85610c11565b830182610d02565b50505b505050565b600082821c905092915050565b6000610d8960001984600802610d6b565b1980831691505092915050565b6000610da28383610d78565b9150826002028217905092915050565b610dbc8383610bc2565b67ffffffffffffffff811115610dd557610dd4610bcd565b5b610ddf8254610b39565b610dea828285610d25565b6000601f831160018114610e195760008415610e07578287013590505b610e118582610d96565b865550610e79565b601f198416610e2786610bfc565b60005b82811015610e4f57848901358255600182019150602085019450602081019050610e2a565b86831015610e6c5784890135610e68601f891682610d78565b8355505b6001600288020188555050505b50505050505050565b610e8b81610c80565b8114610e9657600080fd5b50565b600081519050610ea881610e82565b92915050565b600060208284031215610ec457610ec3610825565b5b6000610ed284828501610e99565b9150509291505056fea264697066735822122020d7664d96db768fbeed713e198214bedeb16208c75a95ac2670f99c5ebfe5b564736f6c63430008180033";

type MailServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MailServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MailService__factory extends ContractFactory {
  constructor(...args: MailServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MailService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MailService__factory {
    return super.connect(runner) as MailService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MailServiceInterface {
    return new Interface(_abi) as MailServiceInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MailService {
    return new Contract(address, _abi, runner) as unknown as MailService;
  }
}
