/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockUSDC, MockUSDCInterface } from "../MockUSDC";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600981526020017f4d6f636b20555344430000000000000000000000000000000000000000000000815250600290816200004a91906200038a565b506040518060400160405280600481526020017f5553444300000000000000000000000000000000000000000000000000000000815250600390816200009191906200038a565b506006600460006101000a81548160ff021916908360ff16021790555064e8d4a51000600555348015620000c457600080fd5b506005546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000471565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200019257607f821691505b602082108103620001a857620001a76200014a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001d3565b6200021e8683620001d3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200026b620002656200025f8462000236565b62000240565b62000236565b9050919050565b6000819050919050565b62000287836200024a565b6200029f620002968262000272565b848454620001e0565b825550505050565b600090565b620002b6620002a7565b620002c38184846200027c565b505050565b5b81811015620002eb57620002df600082620002ac565b600181019050620002c9565b5050565b601f8211156200033a576200030481620001ae565b6200030f84620001c3565b810160208510156200031f578190505b620003376200032e85620001c3565b830182620002c8565b50505b505050565b600082821c905092915050565b60006200035f600019846008026200033f565b1980831691505092915050565b60006200037a83836200034c565b9150826002028217905092915050565b620003958262000110565b67ffffffffffffffff811115620003b157620003b06200011b565b5b620003bd825462000179565b620003ca828285620002ef565b600060209050601f831160018114620004025760008415620003ed578287015190505b620003f985826200036c565b86555062000469565b601f1984166200041286620001ae565b60005b828110156200043c5784890151825560018201915060208501945060208101905062000415565b868310156200045c578489015162000458601f8916826200034c565b8355505b6001600288020188555050505b505050505050565b610c6a80620004816000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b8919061087f565b60405180910390f35b6100db60048036038101906100d6919061093a565b6102b5565b6040516100e89190610995565b60405180910390f35b6100f9610342565b60405161010691906109bf565b60405180910390f35b610129600480360381019061012491906109da565b610348565b6040516101369190610995565b60405180910390f35b610147610568565b6040516101549190610a49565b60405180910390f35b6101776004803603810190610172919061093a565b61057b565b005b610193600480360381019061018e9190610a64565b6105ed565b6040516101a091906109bf565b60405180910390f35b6101b1610605565b6040516101be919061087f565b60405180910390f35b6101e160048036038101906101dc919061093a565b610693565b6040516101ee9190610995565b60405180910390f35b610211600480360381019061020c9190610a91565b6107ca565b60405161021e91906109bf565b60405180910390f35b6002805461023490610b00565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610b00565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60055481565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541080610411575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561041f5760009050610561565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046d9190610b60565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c29190610b94565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105559190610b60565b92505081905550600190505b9392505050565b600460009054906101000a900460ff1681565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c99190610b94565b9250508190555080600560008282546105e29190610b94565b925050819055505050565b60006020528060005260406000206000915090505481565b6003805461061290610b00565b80601f016020809104026020016040519081016040528092919081815260200182805461063e90610b00565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070d90610c14565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107649190610b60565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107b99190610b94565b925050819055506001905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b8381101561082957808201518184015260208101905061080e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610851826107ef565b61085b81856107fa565b935061086b81856020860161080b565b61087481610835565b840191505092915050565b600060208201905081810360008301526108998184610846565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108d1826108a6565b9050919050565b6108e1816108c6565b81146108ec57600080fd5b50565b6000813590506108fe816108d8565b92915050565b6000819050919050565b61091781610904565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b60008060408385031215610951576109506108a1565b5b600061095f858286016108ef565b925050602061097085828601610925565b9150509250929050565b60008115159050919050565b61098f8161097a565b82525050565b60006020820190506109aa6000830184610986565b92915050565b6109b981610904565b82525050565b60006020820190506109d460008301846109b0565b92915050565b6000806000606084860312156109f3576109f26108a1565b5b6000610a01868287016108ef565b9350506020610a12868287016108ef565b9250506040610a2386828701610925565b9150509250925092565b600060ff82169050919050565b610a4381610a2d565b82525050565b6000602082019050610a5e6000830184610a3a565b92915050565b600060208284031215610a7a57610a796108a1565b5b6000610a88848285016108ef565b91505092915050565b60008060408385031215610aa857610aa76108a1565b5b6000610ab6858286016108ef565b9250506020610ac7858286016108ef565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b1857607f821691505b602082108103610b2b57610b2a610ad1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b6b82610904565b9150610b7683610904565b9250828203905081811115610b8e57610b8d610b31565b5b92915050565b6000610b9f82610904565b9150610baa83610904565b9250828201905080821115610bc257610bc1610b31565b5b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610bfe6014836107fa565b9150610c0982610bc8565b602082019050919050565b60006020820190508181036000830152610c2d81610bf1565b905091905056fea2646970667358221220dd94dd39ef22a20372cc01d177822d80d0f1797134b09f2a517928bcfe0cb64464736f6c63430008180033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUSDC & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUSDC__factory {
    return super.connect(runner) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new Interface(_abi) as MockUSDCInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockUSDC {
    return new Contract(address, _abi, runner) as unknown as MockUSDC;
  }
}
