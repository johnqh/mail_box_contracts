/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SafeDelegateHelper,
  SafeDelegateHelperInterface,
} from "../SafeDelegateHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mailService",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdcToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "domainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fundAndApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyDomains",
    outputs: [
      {
        internalType: "string[]",
        name: "domains",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "expirations",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mailService",
    outputs: [
      {
        internalType: "contract MailService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ownerToRemove",
        type: "address",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "setThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
    ],
    name: "testDelegation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
    ],
    name: "testDomainRegistration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
    ],
    name: "testDomainRelease",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdcToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526002805560006004553480156200001a57600080fd5b50604051620017c6380380620017c68339818101604052810190620000409190620001fa565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360019080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000241565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001c28262000195565b9050919050565b620001d481620001b5565b8114620001e057600080fd5b50565b600081519050620001f481620001c9565b92915050565b6000806040838503121562000214576200021362000190565b5b60006200022485828601620001e3565b92505060206200023785828601620001e3565b9150509250929050565b61157580620002516000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637065cb4811610097578063c6c427bb11610066578063c6c427bb1461024a578063e6d4958b14610266578063e75235b814610285578063f698da25146102a3576100f5565b80637065cb48146101d6578063960bfe04146101f2578063a0e67e2b1461020e578063affed0e01461022c576100f5565b8063173825d9116100d3578063173825d9146101525780632f54bf6e1461016e578063617ef8b31461019e5780636bab9c14146101ba576100f5565b806302936d55146100fa5780630f98a8791461011657806311eac85514610134575b600080fd5b610114600480360381019061010f9190610a1b565b6102c1565b005b61011e610352565b60405161012b9190610ae7565b60405180910390f35b61013c610376565b6040516101499190610b23565b60405180910390f35b61016c60048036038101906101679190610b7c565b61039c565b005b61018860048036038101906101839190610b7c565b610526565b6040516101959190610bc4565b60405180910390f35b6101b860048036038101906101b39190610b7c565b6105ce565b005b6101d460048036038101906101cf9190610c15565b61065c565b005b6101f060048036038101906101eb9190610b7c565b610738565b005b61020c60048036038101906102079190610c15565b61079e565b005b6102166107a8565b6040516102239190610d00565b60405180910390f35b610234610836565b6040516102419190610d31565b60405180910390f35b610264600480360381019061025f9190610a1b565b610840565b005b61026e6108d1565b60405161027c929190610f5c565b60405180910390f35b61028d610970565b60405161029a9190610d31565b60405180910390f35b6102ab61097a565b6040516102b89190610fac565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337c2cf3683836040518363ffffffff1660e01b815260040161031c929190611014565b600060405180830381600087803b15801561033657600080fd5b505af115801561034a573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b600380549050811015610522578173ffffffffffffffffffffffffffffffffffffffff16600382815481106103d7576103d6611038565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361051557600360016003805490506104319190611096565b8154811061044257610441611038565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003828154811061048157610480611038565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038054806104db576104da6110ca565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610522565b808060010191505061039f565b5050565b600080600090505b6003805490508110156105c3578273ffffffffffffffffffffffffffffffffffffffff166003828154811061056657610565611038565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105b65760019150506105c9565b808060010191505061052e565b50600090505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac637c7a826040518263ffffffff1660e01b81526004016106279190611108565b600060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016106d9929190611123565b6020604051808303816000875af11580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c9190611178565b5060046000815480929190610730906111a5565b919050555050565b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8060028190555050565b6060600380548060200260200160405190810160405280929190818152602001828054801561082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e2575b5050505050905090565b6000600454905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5cad08a83836040518363ffffffff1660e01b815260040161089b929190611014565b600060405180830381600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050505050565b60608060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639101cc656040518163ffffffff1660e01b8152600401600060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061096891906114c7565b915091509091565b6000600254905090565b60007facb338a617fc5f44548239c1152a3935e462782b11a482b28ccfb213e65a9403905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109db576109da6109b6565b5b8235905067ffffffffffffffff8111156109f8576109f76109bb565b5b602083019150836001820283011115610a1457610a136109c0565b5b9250929050565b60008060208385031215610a3257610a316109ac565b5b600083013567ffffffffffffffff811115610a5057610a4f6109b1565b5b610a5c858286016109c5565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610aad610aa8610aa384610a68565b610a88565b610a68565b9050919050565b6000610abf82610a92565b9050919050565b6000610ad182610ab4565b9050919050565b610ae181610ac6565b82525050565b6000602082019050610afc6000830184610ad8565b92915050565b6000610b0d82610ab4565b9050919050565b610b1d81610b02565b82525050565b6000602082019050610b386000830184610b14565b92915050565b6000610b4982610a68565b9050919050565b610b5981610b3e565b8114610b6457600080fd5b50565b600081359050610b7681610b50565b92915050565b600060208284031215610b9257610b916109ac565b5b6000610ba084828501610b67565b91505092915050565b60008115159050919050565b610bbe81610ba9565b82525050565b6000602082019050610bd96000830184610bb5565b92915050565b6000819050919050565b610bf281610bdf565b8114610bfd57600080fd5b50565b600081359050610c0f81610be9565b92915050565b600060208284031215610c2b57610c2a6109ac565b5b6000610c3984828501610c00565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c7781610b3e565b82525050565b6000610c898383610c6e565b60208301905092915050565b6000602082019050919050565b6000610cad82610c42565b610cb78185610c4d565b9350610cc283610c5e565b8060005b83811015610cf3578151610cda8882610c7d565b9750610ce583610c95565b925050600181019050610cc6565b5085935050505092915050565b60006020820190508181036000830152610d1a8184610ca2565b905092915050565b610d2b81610bdf565b82525050565b6000602082019050610d466000830184610d22565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610db2578082015181840152602081019050610d97565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dda82610d78565b610de48185610d83565b9350610df4818560208601610d94565b610dfd81610dbe565b840191505092915050565b6000610e148383610dcf565b905092915050565b6000602082019050919050565b6000610e3482610d4c565b610e3e8185610d57565b935083602082028501610e5085610d68565b8060005b85811015610e8c5784840389528151610e6d8582610e08565b9450610e7883610e1c565b925060208a01995050600181019050610e54565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ed381610bdf565b82525050565b6000610ee58383610eca565b60208301905092915050565b6000602082019050919050565b6000610f0982610e9e565b610f138185610ea9565b9350610f1e83610eba565b8060005b83811015610f4f578151610f368882610ed9565b9750610f4183610ef1565b925050600181019050610f22565b5085935050505092915050565b60006040820190508181036000830152610f768185610e29565b90508181036020830152610f8a8184610efe565b90509392505050565b6000819050919050565b610fa681610f93565b82525050565b6000602082019050610fc16000830184610f9d565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000610ff38385610fc7565b9350611000838584610fd8565b61100983610dbe565b840190509392505050565b6000602082019050818103600083015261102f818486610fe7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110a182610bdf565b91506110ac83610bdf565b92508282039050818111156110c4576110c3611067565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b61110281610b3e565b82525050565b600060208201905061111d60008301846110f9565b92915050565b600060408201905061113860008301856110f9565b6111456020830184610d22565b9392505050565b61115581610ba9565b811461116057600080fd5b50565b6000815190506111728161114c565b92915050565b60006020828403121561118e5761118d6109ac565b5b600061119c84828501611163565b91505092915050565b60006111b082610bdf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e2576111e1611067565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61122582610dbe565b810181811067ffffffffffffffff82111715611244576112436111ed565b5b80604052505050565b60006112576109a2565b9050611263828261121c565b919050565b600067ffffffffffffffff821115611283576112826111ed565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156112b4576112b36111ed565b5b6112bd82610dbe565b9050602081019050919050565b60006112dd6112d884611299565b61124d565b9050828152602081018484840111156112f9576112f8611294565b5b611304848285610d94565b509392505050565b600082601f830112611321576113206109b6565b5b81516113318482602086016112ca565b91505092915050565b600061134d61134884611268565b61124d565b905080838252602082019050602084028301858111156113705761136f6109c0565b5b835b818110156113b757805167ffffffffffffffff811115611395576113946109b6565b5b8086016113a2898261130c565b85526020850194505050602081019050611372565b5050509392505050565b600082601f8301126113d6576113d56109b6565b5b81516113e684826020860161133a565b91505092915050565b600067ffffffffffffffff82111561140a576114096111ed565b5b602082029050602081019050919050565b60008151905061142a81610be9565b92915050565b600061144361143e846113ef565b61124d565b90508083825260208201905060208402830185811115611466576114656109c0565b5b835b8181101561148f578061147b888261141b565b845260208401935050602081019050611468565b5050509392505050565b600082601f8301126114ae576114ad6109b6565b5b81516114be848260208601611430565b91505092915050565b600080604083850312156114de576114dd6109ac565b5b600083015167ffffffffffffffff8111156114fc576114fb6109b1565b5b611508858286016113c1565b925050602083015167ffffffffffffffff811115611529576115286109b1565b5b61153585828601611499565b915050925092905056fea2646970667358221220e26fed2adfc4f1471757bad147607b47ef5a6e51ce805fd1eb843b822ee28da364736f6c63430008180033";

type SafeDelegateHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeDelegateHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeDelegateHelper__factory extends ContractFactory {
  constructor(...args: SafeDelegateHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _mailService: AddressLike,
    _usdcToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _mailService,
      _usdcToken,
      overrides || {}
    );
  }
  override deploy(
    _mailService: AddressLike,
    _usdcToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_mailService, _usdcToken, overrides || {}) as Promise<
      SafeDelegateHelper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SafeDelegateHelper__factory {
    return super.connect(runner) as SafeDelegateHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeDelegateHelperInterface {
    return new Interface(_abi) as SafeDelegateHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SafeDelegateHelper {
    return new Contract(address, _abi, runner) as unknown as SafeDelegateHelper;
  }
}
