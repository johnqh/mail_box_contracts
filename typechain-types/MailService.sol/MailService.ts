/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MailServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegateTo"
      | "delegationFee"
      | "getDelegationFee"
      | "getRegistrationFee"
      | "owner"
      | "registerDomain"
      | "registrationFee"
      | "releaseRegistration"
      | "setDelegationFee"
      | "setRegistrationFee"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegationCleared"
      | "DelegationFeeUpdated"
      | "DelegationSet"
      | "DomainExtended"
      | "DomainRegistered"
      | "DomainReleased"
      | "RegistrationFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseRegistration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace DelegationClearedEvent {
  export type InputTuple = [delegator: AddressLike];
  export type OutputTuple = [delegator: string];
  export interface OutputObject {
    delegator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationSetEvent {
  export type InputTuple = [delegator: AddressLike, delegate: AddressLike];
  export type OutputTuple = [delegator: string, delegate: string];
  export interface OutputObject {
    delegator: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainExtendedEvent {
  export type InputTuple = [
    domain: string,
    registrar: AddressLike,
    newExpiration: BigNumberish
  ];
  export type OutputTuple = [
    domain: string,
    registrar: string,
    newExpiration: bigint
  ];
  export interface OutputObject {
    domain: string;
    registrar: string;
    newExpiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    domain: string,
    registrar: AddressLike,
    expiration: BigNumberish
  ];
  export type OutputTuple = [
    domain: string,
    registrar: string,
    expiration: bigint
  ];
  export interface OutputObject {
    domain: string;
    registrar: string;
    expiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainReleasedEvent {
  export type InputTuple = [domain: string, registrar: AddressLike];
  export type OutputTuple = [domain: string, registrar: string];
  export interface OutputObject {
    domain: string;
    registrar: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailService extends BaseContract {
  connect(runner?: ContractRunner | null): MailService;
  waitForDeployment(): Promise<this>;

  interface: MailServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegateTo: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  delegationFee: TypedContractMethod<[], [bigint], "view">;

  getDelegationFee: TypedContractMethod<[], [bigint], "view">;

  getRegistrationFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerDomain: TypedContractMethod<
    [domain: string, isExtension: boolean],
    [void],
    "nonpayable"
  >;

  registrationFee: TypedContractMethod<[], [bigint], "view">;

  releaseRegistration: TypedContractMethod<
    [domain: string],
    [void],
    "nonpayable"
  >;

  setDelegationFee: TypedContractMethod<
    [usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRegistrationFee: TypedContractMethod<
    [usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegateTo"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegistrationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDomain"
  ): TypedContractMethod<
    [domain: string, isExtension: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registrationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseRegistration"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegationFee"
  ): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRegistrationFee"
  ): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DelegationCleared"
  ): TypedContractEvent<
    DelegationClearedEvent.InputTuple,
    DelegationClearedEvent.OutputTuple,
    DelegationClearedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationFeeUpdated"
  ): TypedContractEvent<
    DelegationFeeUpdatedEvent.InputTuple,
    DelegationFeeUpdatedEvent.OutputTuple,
    DelegationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationSet"
  ): TypedContractEvent<
    DelegationSetEvent.InputTuple,
    DelegationSetEvent.OutputTuple,
    DelegationSetEvent.OutputObject
  >;
  getEvent(
    key: "DomainExtended"
  ): TypedContractEvent<
    DomainExtendedEvent.InputTuple,
    DomainExtendedEvent.OutputTuple,
    DomainExtendedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DomainReleased"
  ): TypedContractEvent<
    DomainReleasedEvent.InputTuple,
    DomainReleasedEvent.OutputTuple,
    DomainReleasedEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationFeeUpdated"
  ): TypedContractEvent<
    RegistrationFeeUpdatedEvent.InputTuple,
    RegistrationFeeUpdatedEvent.OutputTuple,
    RegistrationFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "DelegationCleared(address)": TypedContractEvent<
      DelegationClearedEvent.InputTuple,
      DelegationClearedEvent.OutputTuple,
      DelegationClearedEvent.OutputObject
    >;
    DelegationCleared: TypedContractEvent<
      DelegationClearedEvent.InputTuple,
      DelegationClearedEvent.OutputTuple,
      DelegationClearedEvent.OutputObject
    >;

    "DelegationFeeUpdated(uint256,uint256)": TypedContractEvent<
      DelegationFeeUpdatedEvent.InputTuple,
      DelegationFeeUpdatedEvent.OutputTuple,
      DelegationFeeUpdatedEvent.OutputObject
    >;
    DelegationFeeUpdated: TypedContractEvent<
      DelegationFeeUpdatedEvent.InputTuple,
      DelegationFeeUpdatedEvent.OutputTuple,
      DelegationFeeUpdatedEvent.OutputObject
    >;

    "DelegationSet(address,address)": TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;
    DelegationSet: TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;

    "DomainExtended(string,address,uint256)": TypedContractEvent<
      DomainExtendedEvent.InputTuple,
      DomainExtendedEvent.OutputTuple,
      DomainExtendedEvent.OutputObject
    >;
    DomainExtended: TypedContractEvent<
      DomainExtendedEvent.InputTuple,
      DomainExtendedEvent.OutputTuple,
      DomainExtendedEvent.OutputObject
    >;

    "DomainRegistered(string,address,uint256)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;

    "DomainReleased(string,address)": TypedContractEvent<
      DomainReleasedEvent.InputTuple,
      DomainReleasedEvent.OutputTuple,
      DomainReleasedEvent.OutputObject
    >;
    DomainReleased: TypedContractEvent<
      DomainReleasedEvent.InputTuple,
      DomainReleasedEvent.OutputTuple,
      DomainReleasedEvent.OutputObject
    >;

    "RegistrationFeeUpdated(uint256,uint256)": TypedContractEvent<
      RegistrationFeeUpdatedEvent.InputTuple,
      RegistrationFeeUpdatedEvent.OutputTuple,
      RegistrationFeeUpdatedEvent.OutputObject
    >;
    RegistrationFeeUpdated: TypedContractEvent<
      RegistrationFeeUpdatedEvent.InputTuple,
      RegistrationFeeUpdatedEvent.OutputTuple,
      RegistrationFeeUpdatedEvent.OutputObject
    >;
  };
}
