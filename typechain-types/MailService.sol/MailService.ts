/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MailServiceInterface extends Interface {
  getFunction(
    nameOrSignature: "delegateTo" | "getDelegatedAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DelegationCleared" | "DelegationSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedAddress",
    data: BytesLike
  ): Result;
}

export namespace DelegationClearedEvent {
  export type InputTuple = [delegator: AddressLike];
  export type OutputTuple = [delegator: string];
  export interface OutputObject {
    delegator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationSetEvent {
  export type InputTuple = [delegator: AddressLike, delegate: AddressLike];
  export type OutputTuple = [delegator: string, delegate: string];
  export interface OutputObject {
    delegator: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailService extends BaseContract {
  connect(runner?: ContractRunner | null): MailService;
  waitForDeployment(): Promise<this>;

  interface: MailServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegateTo: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  getDelegatedAddress: TypedContractMethod<
    [delegator: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegateTo"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDelegatedAddress"
  ): TypedContractMethod<[delegator: AddressLike], [string], "view">;

  getEvent(
    key: "DelegationCleared"
  ): TypedContractEvent<
    DelegationClearedEvent.InputTuple,
    DelegationClearedEvent.OutputTuple,
    DelegationClearedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationSet"
  ): TypedContractEvent<
    DelegationSetEvent.InputTuple,
    DelegationSetEvent.OutputTuple,
    DelegationSetEvent.OutputObject
  >;

  filters: {
    "DelegationCleared(address)": TypedContractEvent<
      DelegationClearedEvent.InputTuple,
      DelegationClearedEvent.OutputTuple,
      DelegationClearedEvent.OutputObject
    >;
    DelegationCleared: TypedContractEvent<
      DelegationClearedEvent.InputTuple,
      DelegationClearedEvent.OutputTuple,
      DelegationClearedEvent.OutputObject
    >;

    "DelegationSet(address,address)": TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;
    DelegationSet: TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;
  };
}
