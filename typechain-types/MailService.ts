/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MailServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegateTo"
      | "delegationFee"
      | "getDelegationFee"
      | "owner"
      | "rejectDelegation"
      | "setDelegationFee"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DelegationFeeUpdated" | "DelegationSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectDelegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace DelegationFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationSetEvent {
  export type InputTuple = [delegator: AddressLike, delegate: AddressLike];
  export type OutputTuple = [delegator: string, delegate: string];
  export interface OutputObject {
    delegator: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MailService extends BaseContract {
  connect(runner?: ContractRunner | null): MailService;
  waitForDeployment(): Promise<this>;

  interface: MailServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegateTo: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  delegationFee: TypedContractMethod<[], [bigint], "view">;

  getDelegationFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rejectDelegation: TypedContractMethod<
    [delegatingAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelegationFee: TypedContractMethod<
    [usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegateTo"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectDelegation"
  ): TypedContractMethod<
    [delegatingAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDelegationFee"
  ): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DelegationFeeUpdated"
  ): TypedContractEvent<
    DelegationFeeUpdatedEvent.InputTuple,
    DelegationFeeUpdatedEvent.OutputTuple,
    DelegationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationSet"
  ): TypedContractEvent<
    DelegationSetEvent.InputTuple,
    DelegationSetEvent.OutputTuple,
    DelegationSetEvent.OutputObject
  >;

  filters: {
    "DelegationFeeUpdated(uint256,uint256)": TypedContractEvent<
      DelegationFeeUpdatedEvent.InputTuple,
      DelegationFeeUpdatedEvent.OutputTuple,
      DelegationFeeUpdatedEvent.OutputObject
    >;
    DelegationFeeUpdated: TypedContractEvent<
      DelegationFeeUpdatedEvent.InputTuple,
      DelegationFeeUpdatedEvent.OutputTuple,
      DelegationFeeUpdatedEvent.OutputObject
    >;

    "DelegationSet(address,address)": TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;
    DelegationSet: TypedContractEvent<
      DelegationSetEvent.InputTuple,
      DelegationSetEvent.OutputTuple,
      DelegationSetEvent.OutputObject
    >;
  };
}
